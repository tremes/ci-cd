#!groovy
import org.yaml.snakeyaml.Yaml

def installerOptions = [:]

def verifyInstallerOptions(installerOptions) {
    if (!installerOptions.clusterName || !installerOptions.openshiftMasterUrl || !installerOptions.clusterAdminUsername || 
        !installerOptions.clusterAdminPassword || !installerOptions.installationGitUrl || !installerOptions.installationGitBranch) {
            def clusterAdminCredentials = setClusterAdminCredentials()
            def userInput = input message: 'Installer Options', parameters: [
                string(defaultValue: (installerOptions.clusterName ?: ''), description: 'Cluster name', name: 'clusterName'),
                string(defaultValue: (installerOptions.openshiftMasterUrl ?: ''), description: 'OpenShift cluster public URL', name: 'openshiftMasterUrl'),
                string(defaultValue: (installerOptions.clusterAdminUsername ?: clusterAdminCredentials.clusterAdminUsername), description: 'OpenShift cluster admin username', name: 'clusterAdminUsername'),
                password(defaultValue: (installerOptions.clusterAdminPassword ?: clusterAdminCredentials.clusterAdminPassword), description: 'OpenShift cluster admin password', name: 'clusterAdminPassword'),
                string(defaultValue: (installerOptions.installationGitUrl ?: 'https://github.com/integr8ly/installation.git'), description: 'Integreatly installer Git URL', name: 'installationGitUrl'),
                string(defaultValue: (installerOptions.installationGitBranch ?: 'master'), description: 'Integreatly installer Git branch', name: 'installationGitBranch'),
            ]

            installerOptions.clusterName = userInput.clusterName
            installerOptions.openshiftMasterUrl = userInput.openshiftMasterUrl
            installerOptions.clusterAdminUsername = userInput.clusterAdminUsername
            installerOptions.clusterAdminPassword = userInput.clusterAdminPassword
            installerOptions.installationGitUrl = userInput.installationGitUrl
            installerOptions.installationGitBranch = userInput.installationGitBranch
            verifyInstallerOptions(installerOptions)
    }
}

def setClusterAdminCredentials() {
    def integreatlyCredentialsID = 'tower-openshift-cluster-credentials'
    def clusterAdminCredentials = [:]
    withCredentials([usernamePassword(credentialsId: integreatlyCredentialsID, usernameVariable: 'CLUSTER_ADMIN_USERNAME', passwordVariable: 'CLUSTER_ADMIN_PASSWORD')]) {
        clusterAdminCredentials.clusterAdminUsername = "${CLUSTER_ADMIN_USERNAME}"
        clusterAdminCredentials.clusterAdminPassword = "${CLUSTER_ADMIN_PASSWORD}"
    }

    return clusterAdminCredentials
}

stage("Verify Installation Options") {
    def clusterAdminCredentials = setClusterAdminCredentials()
    installerOptions.clusterName = params.clusterName
    installerOptions.openshiftMasterUrl = params.openshiftMasterUrl
    installerOptions.clusterAdminUsername = params.clusterAdminUsername ?: clusterAdminCredentials.clusterAdminUsername // Defaults to the username stored in tower-openshift-cluster-credentials
    installerOptions.clusterAdminPassword = "${params.clusterAdminPassword}".toString() ?: clusterAdminCredentials.clusterAdminPassword // Defaults to the password stored in tower-openshift-cluster-credentials
    installerOptions.installationGitUrl = params.installationGitUrl
    installerOptions.installationGitBranch = params.installationGitBranch
    installerOptions.userCount = params.userCount
    installerOptions.selfSignedCerts = params.selfSignedCerts ? 'true': 'false'
    installerOptions.awsCredentials = 'fheng.AWS'

    verifyInstallerOptions(installerOptions)
    println "Installer Options: ${installerOptions}"
    currentBuild.displayName = "${currentBuild.displayName} ${installerOptions.clusterName}"
    currentBuild.description = """clusterName: ${installerOptions.clusterName}\nopenshiftMasterUrl: ${installerOptions.openshiftMasterUrl}
                                \nopenshiftUsername: ${installerOptions.clusterAdminUsername}\nopenshiftPassword: ${installerOptions.clusterAdminPassword}
                                \ninstallationGitUrl: ${installerOptions.installationGitUrl}\ninstallationGitBranch: ${installerOptions.installationGitBranch}
                                \nselfSignedCerts: ${installerOptions.selfSignedCerts}\nawsCredentials:${installerOptions.awsCredentials}"""
}

stage('Pre-install') {
    // Syncs brew images if an image sync config file is found
    def jobName = 'openshift-cluster-brew-image-sync'
    def jobParams = [
        [$class: 'StringParameterValue', name: 'openshiftMasterUrl', value: installerOptions.openshiftMasterUrl],
        [$class: 'StringParameterValue', name: 'clusterAdminUsername', value: installerOptions.clusterAdminUsername],
        [$class: 'StringParameterValue', name: 'clusterAdminPassword', value: installerOptions.clusterAdminPassword],
        [$class: 'StringParameterValue', name: 'installationGitUrl', value: installerOptions.installationGitUrl],
        [$class: 'StringParameterValue', name: 'installationGitBranch', value: installerOptions.installationGitBranch],
        [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
    ]
    build job: jobName, parameters: jobParams
}

node('cirhos_rhel7') {
    cleanWs()
    stage('Install Integreatly') {
        if (params.dryRun) {
            println("Would call ansibleTower Integreatly Install Workflow template with the following installer options: ${installerOptions}")
        } else {
            additionalParams = ""
            if(params.additionalParameters != null) {
                additionalParams = params.additionalParameters.split(',')
            }
            def extraVars = [
                tower_environment: "dev",
                cluster_name: "${installerOptions.clusterName}",
                openshift_master_public_url: "${installerOptions.openshiftMasterUrl}",
                openshift_username: "${installerOptions.clusterAdminUsername}",
                openshift_password: "${installerOptions.clusterAdminPassword}",
                integreatly_project_install_scm_url: "${installerOptions.installationGitUrl}",
                integreatly_project_install_scm_branch: "${installerOptions.installationGitBranch}",
                eval_seed_users_count: "${installerOptions.userCount}",
                eval_self_signed_certs: "${installerOptions.selfSignedCerts}",
                integreatly_inventory_source_aws_credentials: "${installerOptions.awsCredentials}"
            ]
            for(String param : additionalParams) {
                def paramValues = param.split(":")
                extraVars.put(paramValues[0].trim(), paramValues[1].trim())
            }
            println(extraVars)

            Yaml yamlParams = new Yaml()
            StringWriter writer = new StringWriter();
            yamlParams.dump(extraVars, writer)
            wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                ansibleTower(
                    towerServer: 'Dev Tower',
                    jobTemplate: 'Integreatly Install Workflow',
                    templateType: 'workflow',
                    importTowerLogs: true,
                    removeColor: false,
                    verbose: true,
                    extraVars: writer.toString()
                )
            }
        }
    }
}
